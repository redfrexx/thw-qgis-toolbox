# -*- coding: utf-8 -*-

"""
/***************************************************************************
 THW
                                 A QGIS plugin
 Tools for supporting THW
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-02-19
        copyright            : (C) 2022 by Christina Ludwig (THW Heidelberg)
        email                : christina.ludwig@thw-heidelberg.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Christina Ludwig (THW Heidelberg)'
__date__ = '2022-02-19'
__copyright__ = '(C) 2022 by Christina Ludwig (THW Heidelberg)'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingParameterBoolean,
                       QgsCoordinateReferenceSystem,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterExtent,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink)
from qgis.utils import iface
import processing
from qgis.PyQt.QtGui import QIcon
from .resources import *

from pathlib import Path

suchgitter_qml_file = Path(__file__).resolve().parents[0] / "assets/suchgitter_grau.qml"


class SearchGrid(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(QgsProcessingParameterExtent('Suchgebiet', 'Gitterausdehnung', defaultValue=None))
        self.addParameter(QgsProcessingParameterNumber('Gittergre', 'Zellengröße (horizontal)', type=QgsProcessingParameterNumber.Integer, minValue=0, maxValue=10000, defaultValue=100))
        self.addParameter(QgsProcessingParameterNumber('VertikaleZellengre', 'Zellengröße (vertikal)', type=QgsProcessingParameterNumber.Integer, minValue=0, maxValue=10000, defaultValue=100))
        self.addParameter(QgsProcessingParameterFeatureSink('Suchgitter', 'Ausgabedatei', type=QgsProcessing.TypeVectorAnyGeometry, createByDefault=True, defaultValue=None))
        self.addParameter(QgsProcessingParameterBoolean('VERBOSE_LOG', 'Verbose logging', optional=True, defaultValue=False))


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(3, feedback)
        results = {}
        outputs = {}

        # Gitter erzeugen
        project_crs = iface.mapCanvas().mapSettings().destinationCrs()
        alg_params = {
            'CRS': project_crs,
            #'CRS': QgsCoordinateReferenceSystem('EPSG:32632'),
            'EXTENT': parameters['Suchgebiet'],
            'HOVERLAY': 0,
            'HSPACING': parameters['Gittergre'],
            'TYPE': 2,
            'VOVERLAY': 0,
            'VSPACING': parameters['VertikaleZellengre'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['GitterErzeugen'] = processing.run('native:creategrid', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}

        # Zellen umbenennen
        alg_params = {
            'INPUT_DATASOURCES': outputs['GitterErzeugen']['OUTPUT'],
            'INPUT_GEOMETRY_FIELD': '',
            'INPUT_GEOMETRY_TYPE': None,
            'INPUT_GEOMETRY_CRS': project_crs,
            'INPUT_QUERY': 'select *, char(r+64) || ROW_NUMBER() OVER(PARTITION BY r) as newID \nfrom (\n  SELECT *,DENSE_RANK() OVER (ORDER BY round( ST_minY(geometry)/0.02) desc) as r FROM input1  ORDER BY round(ST_minY(geometry)/0.02)  DESC,\n           round( ST_minX(geometry)/0.02)  ASC\n)',
            'INPUT_UID_FIELD': '',
            'OUTPUT': parameters['Suchgitter']
        }
        outputs['ZellenUmbenennen'] = processing.run('qgis:executesql', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['Suchgitter'] = outputs['ZellenUmbenennen']['OUTPUT']

        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}

        # Setze Stil für Vektorlayer
        alg_params = {
            'INPUT': outputs['ZellenUmbenennen']['OUTPUT'],
            'STYLE': str(suchgitter_qml_file)
        }
        outputs['SetzeStilFrVektorlayer'] = processing.run('qgis:setstyleforvectorlayer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        return results

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Suchgitter erstellen'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    #def group(self):
    #    """
    #    Returns the name of the group this algorithm belongs to. This string
    #    should be localised.
    #    """
    #    return self.tr(self.groupId())

    #def groupId(self):
    #    """
    #    Returns the unique ID of the group this algorithm belongs to. This
    #    string should be fixed for the algorithm, and must not be localised.
    #    The group id should be unique within each provider. Group id should
    #    contain lowercase alphanumeric characters only and no spaces or other
    #    formatting characters.
    #    """
    #    return 'Ortung'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return SearchGrid()

    def icon(self):
        """
        Should return a QIcon which is used for your provider inside
        the Processing toolbox.
        """
        #return QgsProcessingProvider.icon(self)
        return QIcon(":/plugins/icons/THW_blue.svg")

    def svgIconPath(self):
        return os.path.abspath("./icons/THW_blue.svg")
